<template id="page.head" args-as="doc">
    <base href="${baseUrlOf(doc)}">
    <title>${titleOf(doc)}</title>
</template>


<template id="attribute2" args-as="klass,relations,caption,separator">
    ${relations.length ? `<div class="attribute"><span class="attribute-label">${caption} </span><span class="attribute-value">${relations.map(doc => `<code>${linkFor(doc)}</code>`).join(separator || ", ")}</span></div>` : ""}
</template>


<template id="params" args-as="item">${render("params-inline", ((item.params || []).concat(item.return ? Object.assign({name: "return"}, item.return) : [])).filter(param => param.description))}</template>


<template id="params-inline" args-as="params">
    ${params.length ? `<div class="parameters"><ul>${params.map(param => render("param", param)).join("")}</ul></div>` : ""}
</template>


<template id="param" args-as="param">
    <li class="param"><code type="return">${param.name}</code> &ndash; ${resolveLink(param.description)}</li>
</template>


<template id="attribute" args-as="title,value,type">
    <div class="attribute ${type}"><span class="attribute-label">${title}</span><code class="attribute-value">${value}</code></div>
</template>


<template id="inline-options" args-as="options">
    <span class="options">${options.join(" | ")}</span>
</template>

<template id="item" args-as="item">
    <article class="item">
        <h3 class="signature">
            ${render("inline-options", [render("debug-toggle", item), sourceLink(item, "source")])}
            <span><a class="anchor" id="${item.name}"></a></span>
            <code class="access">${item.static ? "static" : ""} </code>
            <code class="access">${item.access} </code>
            <code class="access">${item.kind} </code>
            <a class="name" href="${urlFor(item)}">${render("doc.title", item)}</a><!--
         --><code class="return">${signature(item.type || item.return)}</code>
        </h3>
        <div class="attributes">
            ${render("attribute", "Defined in:", sourceLink(item, sourceOf(item).name), "defined")}
        </div>
        ${render("deprecation", item, "this item was deprecated")}
        ${render("experimental", item)}
        ${render("debug-info", item)}
        ${render("description", item)}
        ${render("todo", item)}
    </article>
</template>


<template id="description" args-as="item">
    ${item.description ? `<div class="description">${resolveLink(markdown(item.description))}</div>` : ""}
    ${item.see ? render("sees", item.see) : ""}
    ${item.examples ? render("examples", item.examples) : ""}
</template>

<template id="examples" args-as="examples">
    ${examples.map(example => parseExample(example)).map(({body, caption}) => `
        <div class="example">
            <h4>Example:${caption ? ` <code>${caption}</code>` : ""}</h4>
            <pre class="prettyprint source-code"><code>${escape(body)}</code></pre>
        </div>
    `)}
</template>

<template id="sees" args-as="sees">
    <h4>See:</h4>
    <ul>
    ${sees.map(see => `<li><a href="${see}">${see}</a></li>`).join("")}
    </ul>
</template>

<template id="deprecation" args-as="item,text">
    ${item.deprecated ? `<div class="deprecated">${text}${item.deprecated !== true ? ": " + resolveLink(item.deprecated) : ""}.</div>` : ""}
</template>


<template id="todo" args-as="item">
    ${item.todo ? `
        <div class="todo">
            <h4>Todo:</h4>
            <ul>${item.todo.map(todo => `<li>${resolveLink(todo)}</li>`).join("")}</ul>
        </div>
    ` : ""}
</template>


<template id="experimental" args-as="item">
    ${item.experimental ? `<div class="experimental">this ${item.kind} is experimental.</div>` : ""}
</template>


<template id="debug-toggle" args-as="item">
    <span class="debug-toggle" toggle="#debug-${item.kind}-${item.__docId__}"><a>debug</a></span>
</template>


<template id="debug-info" args-as="item">
    <div class="debug-info object hidden" id="debug-${item.kind}-${item.__docId__}"><pre>${escape(JSON.stringify(item, null, 2))}</pre></div>
</template>
