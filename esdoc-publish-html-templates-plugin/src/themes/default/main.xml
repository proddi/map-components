<template id="renderPage" args-as="builder,doc">
    <main>
        <header></header>
        <nav>${builder.renderNav(builder)}</nav>
        <main>
            ${builder.renderImport(builder, doc)}
            <h1>Element ${doc.name}</h1>
            ${doc._custom_extends_chains ? builder.renderExtends(builder, doc, doc._custom_extends_chains) : ""}
            ${doc._custom_direct_subclasses ? builder.renderDirectSubclass(builder, doc._custom_direct_subclasses) : ""}
            ${doc._custom_indirect_subclasses ? builder.renderIndirectSubclass(builder, doc._custom_indirect_subclasses) : ""}
            ${builder.renderPath(doc.importPath)}
            ${doc.description ? builder.renderDescription(doc.description) : ""}
            ${doc.examples ? doc.examples.map(example => builder.renderExample(builder, example)).join("") : ""}
            <small><pre>${JSON.stringify(doc, null, 2)}</pre></small>

            ${builder.renderMembers(builder, doc)}
            ${builder.renderMethods(builder, doc.longname, doc._custom_extends_chains || [], builder.namesToLongnames(doc.implements || []))}
        </main>
    </main>
</template>




<template id="debug" args-as="doc">
    <small><pre>${JSON.stringify(doc, null, 2)}</pre></small>
</template>


<template id="import" args-as="doc">
    <div class="import" style="color:#8959a8;">
        <pre><code>import <span style="color:#4271ae;">${doc.importStyle}</span> from <span style="color:#718c00;">'${doc.importPath}'</span></code></pre>
    </div>
    <div>
        ${doc.access} ${doc.kind} | ${self.docSourceLink(doc, "source")}
    </div>
</template>


<template id="path" args-as="path">
    <div>Path: <code>${path}</code></div>
</template>


<template id="description" args-as="description">
    <div class="details">${self.formatMarkdown(description)}</div>
</template>


<template id="example" args-as="example">
    <div class="example">
        <h4>Example:</h4>
        <pre class="prettyprint source-code"><code>${self.escapeHTML(self.formatExample(example))}</code></pre>
    </div>
</template>


<template id="class-relations" args-as="klass,relations,caption,separator">
    ${relations.length ? `<p class="inheritedFrom">${caption} <code></code>${relations.map(doc => self.docLink(doc)).join(separator || ", ")}</code></p>` : ""}
</template>


<template id="class-extends_old" args-as="doc">
    ${doc.extends ? `<div class="extends">
        <h4>Extends:</h4>
        ${doc.extends.map(name => self.docLink(self.getDocByName(name, doc))).join("→")} → ${doc.name}
    </div>` : ""}
</template>


<template id="class-properties" args-as="doc">
    <section class="properties">
        <h2>Properties</h2>
        ${self.listClassProperties(doc).map(([property, overrides, inherits]) => render("class-property", property, overrides, inherits)).join("")}
    </section>
</template>


<template id="class-property" args-as="property,overrides,inherits">
    <article class="property">
        <div class="signature">
            <span class="source">${sourceLink(property, "source")}</span>
            <span class="source toggle" toggle="#${property.name}"><a>obj</a></span>
            <code class="access">${property.access}</code>
            <a class="name">${property.name}</a><code class="return">${self.buildPropertySignature(property)}</code>
        </div>
        <div class="object hidden" id="${property.name}"><pre>${JSON.stringify(property, null, 2)}</pre></div>
        ${overrides.length ? overrides.map(target => render("class-method-override", target)) : ''}
        ${inherits ? render("class-method-inherits", self.getParentDoc(property)) : ''}
        ${render("class-deprecation", property, "this property was deprecated")}
        <div class="details">${markdown(property.description || "")}</div>
    </article>
</template>


<template id="class-methods" args-as="doc">
    <section class="methods">
        <h2>Methods</h2>
        ${self.listClassMethods(doc).map(([method, overrides, inherits]) => render("class-method", method, overrides, inherits)).join("")}
    </section>
</template>


<template id="class-method" args-as="method,overrides,inherits">
    <article class="method">
        <div class="signature">
            <span class="source">${sourceLink(method, "source")}</span>
            <span class="source toggle" toggle="#${method.name}"><a>obj</a></span>
            <code class="access">${method.static ? "static" : ""}</code>
            <code class="access">${method.async ? "async" : ""}</code>
            <code class="access">${method.access}</code>
            <a name="${method.name}" class="name" title="${method.longname}">${method.name}</a><code type="return">${self.buildFunctionSignature(method)}</code>
        </div>
        <div class="object hidden" id="${method.name}"><pre>${JSON.stringify(method, null, 2)}</pre></div>
        ${overrides.length ? overrides.map(target => render("class-method-override", target)) : ''}
        ${inherits ? render("class-method-inherits", self.getParentDoc(method)) : ''}
        ${render("class-deprecation", method, "this method was deprecated")}
        <div class="details">${markdown(method.description || "")}</div>
    </article>
</template>


<template id="class-method-override" args-as="target">
    <p class="inheritedFrom">Override <code>${self.docLink(self.getParentDoc(target))}.${self.docLink(target)}</code></p>
</template>


<template id="class-method-inherits" args-as="other">
    <p class="inheritedFrom">Inherited from <code>${self.docLink(other)}</code></p>
</template>


<template id="class-events" args-as="doc">
    ${doc.emits ? `
    <section class="events">
        <h2>Events</h2>
        ${(doc.emits || []).map(event => render("class-event", event)).join("")}
    </section>
    ` : ""}
</template>


<template id="class-event" args-as="event">
    <article class="event">
        <div class="signature">
            <a name="${event.name}" class="name" title="${event.longname}">${event.name}</a><code type="return">${self.buildFunctionSignature(event)}</code>
        </div>
        ${render("description", event.description)}
        <small><pre>${JSON.stringify(event, null, 2)}</pre></small>
    </article>
</template>


<template id="class-deprecation" args-as="doc,text">
    ${doc.deprecated ? `<p class="deprecated">${text}${doc.deprecated !== true ? ": "+doc.deprecated : ""}.</p>` : ""}
</template>
